#!/opt/homebrew/bin/bash

# Colors for output
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
GRAY='\033[0;37m'
EC='\033[0m' # end color

# Default options
silent=false
quiet=false
parallel=false
git_command=false
file_to_check=""  # New variable: file that must exist in the repository

usage() {
cat <<HERE
usage: git run [options] <any command> <parameters to that command>
       git run [options] [repository_list_file] <any command>

Execute commands in all git repositories in the current directory
or in the repositories listed in a file.

Options:
  -s             Silent mode, suppress header output
  -q             Quiet mode, suppress command output
  -p             Run commands in parallel
  -g, --git      Run the specified command as a git command
  -f, --file     Only execute the command if the specified file exists in the repository
  -h, --help     Show this help message
HERE
}

exclude() {
    directory="$1"

    for excluded_directory in "${excluded_directories[@]}"; do
        if [[ "$directory" = "${excluded_directory}/" ]] || [[ "$directory" = "$excluded_directory}" ]]; then
            return 0
        fi
    done

    return 1
}

ERRORFILE=$(mktemp -u)

process() {
    directory="$1"
    shift
    command="$@"

    # Exclude non-git repository folders
    if ! git -C "$directory" rev-parse > /dev/null 2>&1; then
        return
    fi

    cd "$directory" || (echo "Could not change directory!" && exit)

    # If a file check is requested, only proceed if that file exists in the repository
    if [[ -n "$file_to_check" ]] && [[ ! -f "$file_to_check" ]]; then
        if ! $silent; then
            :
            # echo -e "${YELLOW}Skipping${EC} ${directory%/}: '${file_to_check}' not found."
        fi
        cd ..
        return
    fi

    if ! $silent; then
        echo -e "${BLUE}$ ${GRAY}cd${EC} ${directory%/}"
        if ! $quiet; then
            if $git_command; then
                echo -e "${BLUE}$ ${GRAY}git${EC} $command"
            else
                echo -e "${BLUE}$ ${GRAY}$command${EC}"
            fi
        fi
    fi

    # Execute the command
    if $git_command; then
        eval "git $command"
    else
        eval "$command"
    fi

    cd ..
}

main() {
    test -d "$1"
    scope_directory_exists=$?

    test -f "$1"
    scope_regular_file_exists=$?

    test -f ".$1"
    scope_dotfile_exists=$?

    if (( $scope_directory_exists == 0 )); then
        directories="$1"
        use_ignore_file=false
        shift
    elif (( $scope_regular_file_exists == 0 )) || (( $scope_dotfile_exists == 0 )) ; then
        if (( $scope_dotfile_exists == 0 )); then
            scope_file=".$1"
        else
            scope_file="$1"
        fi

        shift

        directories=()
        while read -r directory; do
            directories+=("${directory%/}/")
        done < "$scope_file"

        use_ignore_file=false
    else
        directories=*/
        use_ignore_file=true
    fi

    excluded_directories=()
    if [[ $use_ignore_file && -f .gitallignore ]]; then
        while read -r line; do
            excluded_directories+=("$line")
        done < .gitallignore
    fi

    counter=0

    for directory in ${directories[@]}; do
        if $use_ignore_file && exclude "$directory"; then
            continue
        fi

        if $parallel; then
            (process "$directory" "$@") &
            ((counter++))
            if (( counter >= "${GITRUN_JOBS:-4}" )); then
                wait -n
            fi
        else
            (process "$directory" "$@")
        fi
    done

    if $parallel; then
        wait
    fi

    if [[ -s $ERRORFILE ]]; then
        if $git_command; then
            echo -e "${YELLOW}WARNING! ${GRAY}Non-zero code returned while executing${EC} 'git $@' ${GRAY}in the following repositories:"
        else
            echo -e "${YELLOW}WARNING! ${GRAY}Non-zero code returned while executing${EC} '$@' ${GRAY}in the following repositories:"
        fi
        errors=$(<"$ERRORFILE")
        for repository in ${errors[@]}; do
            echo -e "${GRAY}*${EC} $repository"
        done
    fi

    exit 0
}

# Parse options
while (( "$#" )); do
    case $1 in
        -s)
            silent=true
            shift
            ;;
        -q)
            quiet=true
            shift
            ;;
        -p)
            parallel=true
            shift
            ;;
        -g|--git)
            git_command=true
            shift
            ;;
        -f|--file)
            if [ -n "$2" ]; then
                file_to_check="$2"
                shift 2
            else
                echo "Error: Missing argument for -f|--file"
                exit 1
            fi
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *)
            break
            ;;
    esac
done

main "$@"
